#include <iostream>
#include <matrix.hpp>
#include <dense_layer.hpp>
#include <utils_random.hpp>
#include <activation_relu.hpp>
#include <activation_sigmoid.hpp>
#include <loss_mse.hpp>
#include <model.hpp>
#include <adam_optimizer.hpp>

int main(){
    std::cout<<"Neuronite Initialized!"<<std::endl;

    set_random_seed(42);

    // Step 1: Input and Target (simple 2D XOR-style sample)
    Matrix input({
        {0.0, 0.0},
        {0.0, 1.0},
        {1.0, 0.0},
        {1.0, 1.0}
    });

    Matrix target({
        {0.0},
        {1.0},
        {1.0},
        {0.0}
    });

    // Step 2: Build model: 2 → 4 → 1
    Model model;
    model.add(new DenseLayer(2, 4));
    model.add(new ActivationReLU());
    model.add(new DenseLayer(4, 1));
    model.add(new ActivationSigmoid());

    model.summarize(2);

    LossMSE loss;
    AdamOptimizer optimizer(0.01);
    int epochs = 500;

    model.train(input, target, loss, optimizer, epochs);

    // Final output
    Matrix final_output = model.forward(input);
    std::cout << "\nFinal Predictions:\n";
    final_output.print();

    return 0;
}